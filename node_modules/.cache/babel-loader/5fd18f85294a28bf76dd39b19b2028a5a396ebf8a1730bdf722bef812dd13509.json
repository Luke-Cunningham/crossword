{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/Users/lukecunningham/Documents/GitHub/crossword-app/node_modules/@babel/runtime/helpers/taggedTemplateLiteral.js\").default;\nvar _templateObject;\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar jsx_runtime_1 = require(\"react/jsx-runtime\");\nvar react_1 = require(\"react\");\nvar prop_types_1 = __importDefault(require(\"prop-types\"));\nvar styled_components_1 = __importStar(require(\"styled-components\"));\nvar Cell_1 = __importDefault(require(\"./Cell\"));\nvar context_1 = require(\"./context\");\n// import {\n// } from './types';\nvar defaultTheme = {\n  columnBreakpoint: '768px',\n  gridBackground: 'rgb(0,0,0)',\n  cellBackground: 'rgb(255,255,255)',\n  cellBorder: 'rgb(0,0,0)',\n  textColor: 'rgb(0,0,0)',\n  numberColor: 'rgba(0,0,0, 0.25)',\n  focusBackground: 'rgb(255,255,0)',\n  highlightBackground: 'rgb(255,255,204)'\n};\nvar GridWrapper = styled_components_1.default.div.attrs(function /* props */\n() {\n  return {\n    className: 'crossword grid'\n  };\n})(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n  /* position: relative; */\\n  /* min-width: 20rem; */\\n  /* max-width: 60rem; Should the size matter? */\\n  width: auto;\\n  flex: 2 1 50%;\\n\"])));\nvar CrosswordGridPropTypes = {\n  /** presentation values for the crossword; these override any values coming from a parent ThemeProvider context. */\n  theme: prop_types_1.default.shape({\n    /** browser-width at which the clues go from showing beneath the grid to showing beside the grid */\n    columnBreakpoint: prop_types_1.default.string,\n    /** overall background color (fill) for the crossword grid; can be `'transparent'` to show through a page background image */\n    gridBackground: prop_types_1.default.string,\n    /**  background for an answer cell */\n    cellBackground: prop_types_1.default.string,\n    /** border for an answer cell */\n    cellBorder: prop_types_1.default.string,\n    /** color for answer text (entered by the player) */\n    textColor: prop_types_1.default.string,\n    /** color for the across/down numbers in the grid */\n    numberColor: prop_types_1.default.string,\n    /** background color for the cell with focus, the one that the player is typing into */\n    focusBackground: prop_types_1.default.string,\n    /** background color for the cells in the answer the player is working on,\n     * helps indicate in which direction focus will be moving; also used as a\n     * background on the active clue  */\n    highlightBackground: prop_types_1.default.string\n  })\n};\n// export interface CrosswordGridImperative {\n//   /**\n//    * Sets focus to the crossword component.\n//    */\n//   focus: () => void;\n// }\n/**\n * The rendering component for the crossword grid itself.\n */\nfunction CrosswordGrid(_ref) {\n  var theme = _ref.theme;\n  var _ref2 = (0, react_1.useContext)(context_1.CrosswordContext),\n    rows = _ref2.rows,\n    cols = _ref2.cols,\n    gridData = _ref2.gridData,\n    handleInputKeyDown = _ref2.handleInputKeyDown,\n    handleInputChange = _ref2.handleInputChange,\n    handleCellClick = _ref2.handleCellClick,\n    handleInputClick = _ref2.handleInputClick,\n    registerFocusHandler = _ref2.registerFocusHandler,\n    focused = _ref2.focused,\n    _ref2$selectedPositio = _ref2.selectedPosition,\n    focusedRow = _ref2$selectedPositio.row,\n    focusedCol = _ref2$selectedPositio.col,\n    currentDirection = _ref2.selectedDirection,\n    currentNumber = _ref2.selectedNumber;\n  var inputRef = (0, react_1.useRef)(null);\n  var contextTheme = (0, react_1.useContext)(styled_components_1.ThemeContext);\n  // focus and movement\n  var focus = (0, react_1.useCallback)(function () {\n    var _a;\n    // console.log('CrosswordGrid.focus()', { haveRef: !!inputRef.current });\n    (_a = inputRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, []);\n  (0, react_1.useEffect)(function () {\n    // focus.name = 'CrosswordGrid.focus()';\n    registerFocusHandler(focus);\n    return function () {\n      registerFocusHandler(null);\n    };\n  }, [focus, registerFocusHandler]);\n  // We have several properties that we bundle together as context for the\n  // cells, rather than have them as independent properties.  (Or should they\n  // stay separate? Or be passed as \"spread\" values?)\n  //\n  // We used to calculate sizes as \"fractions of 100\", meaning that the more\n  // rows or columns, the smaller the values would get.  In order to support\n  // non-square crossword grids, it makes much more sense to use a \"fixed\" cell\n  // size, and then calculate the overall extents as a multiple of the cell\n  // size.\n  var cellSize = 10;\n  var cellPadding = 0.125;\n  var cellInner = cellSize - cellPadding * 2;\n  var cellHalf = cellSize / 2;\n  var fontSize = cellInner * 0.7;\n  var sizeContext = (0, react_1.useMemo)(function () {\n    return {\n      cellSize: cellSize,\n      cellPadding: cellPadding,\n      cellInner: cellInner,\n      cellHalf: cellHalf,\n      fontSize: fontSize\n    };\n  }, [cellSize, cellPadding, cellInner, cellHalf, fontSize]);\n  var height = (0, react_1.useMemo)(function () {\n    return rows * cellSize;\n  }, [rows]);\n  var width = (0, react_1.useMemo)(function () {\n    return cols * cellSize;\n  }, [cols]);\n  var cellWidthHtmlPct = (0, react_1.useMemo)(function () {\n    return 100 / cols;\n  }, [cols]);\n  var cellHeightHtmlPct = (0, react_1.useMemo)(function () {\n    return 100 / rows;\n  }, [rows]);\n  // In order to ensure the top/left positioning makes sense, there is an\n  // absolutely-positioned <div> with no margin/padding that we *don't* expose\n  // to consumers.  This keeps the math much more reliable.  (But we're still\n  // seeing a slight vertical deviation towards the bottom of the grid!  The \"*\n  // 0.995\" seems to help.)  We also need to calculate the effective px size of\n  // the automatically-scaled SVG cells.  We know that \"100% width\" === \"number\n  // of columns\".\n  var inputStyle = (0, react_1.useMemo)(function () {\n    return {\n      position: 'absolute',\n      top: \"calc(\".concat(focusedRow * cellHeightHtmlPct * 0.995, \"% + 2px)\"),\n      left: \"calc(\".concat(focusedCol * cellWidthHtmlPct, \"% + 2px)\"),\n      width: \"calc(\".concat(cellWidthHtmlPct, \"% - 4px)\"),\n      height: \"calc(\".concat(cellHeightHtmlPct, \"% - 4px)\"),\n      fontSize: \"\".concat(fontSize * 6, \"px\"),\n      textAlign: 'center',\n      textAnchor: 'middle',\n      backgroundColor: 'transparent',\n      caretColor: 'transparent',\n      margin: 0,\n      padding: 0,\n      border: 0,\n      cursor: 'default'\n    };\n  }, [cellWidthHtmlPct, cellHeightHtmlPct, focusedRow, focusedCol, fontSize]);\n  // The final theme is the merger of three values: the \"theme\" property\n  // passed to the component (which takes precedence), any values from\n  // ThemeContext, and finally the \"defaultTheme\" values fill in for any\n  // needed ones that are missing.  (We create this in standard last-one-wins\n  // order in Javascript, of course.)\n  var finalTheme = (0, react_1.useMemo)(function () {\n    return Object.assign(Object.assign(Object.assign({}, defaultTheme), contextTheme), theme);\n  }, [contextTheme, theme]);\n  return (0, jsx_runtime_1.jsx)(context_1.CrosswordSizeContext.Provider, Object.assign({\n    value: sizeContext\n  }, {\n    children: (0, jsx_runtime_1.jsx)(styled_components_1.ThemeProvider, Object.assign({\n      theme: finalTheme\n    }, {\n      children: (0, jsx_runtime_1.jsx)(GridWrapper, {\n        children: (0, jsx_runtime_1.jsxs)(\"div\", Object.assign({\n          style: {\n            margin: 0,\n            padding: 0,\n            position: 'relative'\n          }\n        }, {\n          children: [(0, jsx_runtime_1.jsxs)(\"svg\", Object.assign({\n            viewBox: \"0 0 \".concat(width, \" \").concat(height)\n          }, {\n            children: [(0, jsx_runtime_1.jsx)(\"rect\", {\n              x: 0,\n              y: 0,\n              width: width,\n              height: height,\n              fill: finalTheme.gridBackground\n            }), gridData.flatMap(function (rowData, row) {\n              return rowData.map(function (cellData, col) {\n                return cellData.used ?\n                // Should the Cell figure out its focus/highlight state\n                // directly from the CrosswordContext?\n                (0, jsx_runtime_1.jsx)(Cell_1.default\n                // eslint-disable-next-line react/no-array-index-key\n                , {\n                  cellData: cellData,\n                  focus: focused && row === focusedRow && col === focusedCol,\n                  highlight: focused && !!currentNumber && cellData[currentDirection] === currentNumber,\n                  onClick: handleCellClick\n                }, \"R\".concat(row, \"C\").concat(col)) : undefined;\n              });\n            })]\n          })), (0, jsx_runtime_1.jsx)(\"input\", {\n            ref: inputRef,\n            \"aria-label\": \"crossword-input\",\n            type: \"text\",\n            onClick: handleInputClick,\n            onKeyDown: handleInputKeyDown,\n            onChange: handleInputChange,\n            value: \"\",\n            // onInput={this.handleInput}\n            autoComplete: \"off\",\n            spellCheck: \"false\",\n            autoCorrect: \"off\",\n            style: inputStyle\n          })]\n        }))\n      })\n    }))\n  }));\n}\nexports.default = CrosswordGrid;\nCrosswordGrid.propTypes = CrosswordGridPropTypes;\nCrosswordGrid.defaultProps = {\n  theme: null\n};","map":{"version":3,"names":["react_1","require","prop_types_1","__importDefault","styled_components_1","__importStar","Cell_1","context_1","defaultTheme","columnBreakpoint","gridBackground","cellBackground","cellBorder","textColor","numberColor","focusBackground","highlightBackground","GridWrapper","default","div","attrs","className","_templateObject","_taggedTemplateLiteral","CrosswordGridPropTypes","theme","shape","string","CrosswordGrid","_ref","_ref2","useContext","CrosswordContext","rows","cols","gridData","handleInputKeyDown","handleInputChange","handleCellClick","handleInputClick","registerFocusHandler","focused","_ref2$selectedPositio","selectedPosition","focusedRow","row","focusedCol","col","currentDirection","selectedDirection","currentNumber","selectedNumber","inputRef","useRef","contextTheme","ThemeContext","focus","useCallback","_a","current","useEffect","cellSize","cellPadding","cellInner","cellHalf","fontSize","sizeContext","useMemo","height","width","cellWidthHtmlPct","cellHeightHtmlPct","inputStyle","position","top","concat","left","textAlign","textAnchor","backgroundColor","caretColor","margin","padding","border","cursor","finalTheme","Object","assign","jsx_runtime_1","jsx","CrosswordSizeContext","Provider","value","children","ThemeProvider","jsxs","style","viewBox","x","y","fill","flatMap","rowData","map","cellData","used","highlight","onClick","undefined","ref","type","onKeyDown","onChange","autoComplete","spellCheck","autoCorrect","exports","propTypes","defaultProps"],"sources":["/Users/lukecunningham/Documents/GitHub/crossword-app/node_modules/@jaredreisinger/react-crossword/src/CrosswordGrid.tsx"],"sourcesContent":["import React, {\n  useCallback,\n  useContext,\n  useEffect,\n  // useImperativeHandle,\n  useMemo,\n  useRef,\n} from 'react';\nimport PropTypes, { InferProps } from 'prop-types';\n\nimport styled, { ThemeContext, ThemeProvider } from 'styled-components';\n\nimport Cell from './Cell';\n\nimport { CrosswordContext, CrosswordSizeContext } from './context';\nimport { FocusHandler } from './types';\n\n// import {\n// } from './types';\n\nconst defaultTheme = {\n  columnBreakpoint: '768px',\n  gridBackground: 'rgb(0,0,0)',\n  cellBackground: 'rgb(255,255,255)',\n  cellBorder: 'rgb(0,0,0)',\n  textColor: 'rgb(0,0,0)',\n  numberColor: 'rgba(0,0,0, 0.25)',\n  focusBackground: 'rgb(255,255,0)',\n  highlightBackground: 'rgb(255,255,204)',\n};\n\nconst GridWrapper = styled.div.attrs((/* props */) => ({\n  className: 'crossword grid',\n}))`\n  /* position: relative; */\n  /* min-width: 20rem; */\n  /* max-width: 60rem; Should the size matter? */\n  width: auto;\n  flex: 2 1 50%;\n`;\n\nconst CrosswordGridPropTypes = {\n  /** presentation values for the crossword; these override any values coming from a parent ThemeProvider context. */\n  theme: PropTypes.shape({\n    /** browser-width at which the clues go from showing beneath the grid to showing beside the grid */\n    columnBreakpoint: PropTypes.string,\n\n    /** overall background color (fill) for the crossword grid; can be `'transparent'` to show through a page background image */\n    gridBackground: PropTypes.string,\n    /**  background for an answer cell */\n    cellBackground: PropTypes.string,\n    /** border for an answer cell */\n    cellBorder: PropTypes.string,\n    /** color for answer text (entered by the player) */\n    textColor: PropTypes.string,\n    /** color for the across/down numbers in the grid */\n    numberColor: PropTypes.string,\n    /** background color for the cell with focus, the one that the player is typing into */\n    focusBackground: PropTypes.string,\n    /** background color for the cells in the answer the player is working on,\n     * helps indicate in which direction focus will be moving; also used as a\n     * background on the active clue  */\n    highlightBackground: PropTypes.string,\n  }),\n};\n\nexport type CrosswordGridProps = InferProps<typeof CrosswordGridPropTypes>;\n\n// export interface CrosswordGridImperative {\n//   /**\n//    * Sets focus to the crossword component.\n//    */\n//   focus: () => void;\n// }\n\n/**\n * The rendering component for the crossword grid itself.\n */\nexport default function CrosswordGrid({ theme }: CrosswordGridProps) {\n  const {\n    rows,\n    cols,\n    gridData,\n    handleInputKeyDown,\n    handleInputChange,\n    handleCellClick,\n    handleInputClick,\n    registerFocusHandler,\n    focused,\n    selectedPosition: { row: focusedRow, col: focusedCol },\n    selectedDirection: currentDirection,\n    selectedNumber: currentNumber,\n  } = useContext(CrosswordContext);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const contextTheme = useContext(ThemeContext);\n\n  // focus and movement\n  const focus = useCallback<FocusHandler>(() => {\n    // console.log('CrosswordGrid.focus()', { haveRef: !!inputRef.current });\n    inputRef.current?.focus();\n  }, []);\n\n  useEffect(() => {\n    // focus.name = 'CrosswordGrid.focus()';\n    registerFocusHandler(focus);\n\n    return () => {\n      registerFocusHandler(null);\n    };\n  }, [focus, registerFocusHandler]);\n\n  // We have several properties that we bundle together as context for the\n  // cells, rather than have them as independent properties.  (Or should they\n  // stay separate? Or be passed as \"spread\" values?)\n  //\n  // We used to calculate sizes as \"fractions of 100\", meaning that the more\n  // rows or columns, the smaller the values would get.  In order to support\n  // non-square crossword grids, it makes much more sense to use a \"fixed\" cell\n  // size, and then calculate the overall extents as a multiple of the cell\n  // size.\n  const cellSize = 10;\n  const cellPadding = 0.125;\n  const cellInner = cellSize - cellPadding * 2;\n  const cellHalf = cellSize / 2;\n  const fontSize = cellInner * 0.7;\n\n  const sizeContext = useMemo(\n    () => ({\n      cellSize,\n      cellPadding,\n      cellInner,\n      cellHalf,\n      fontSize,\n    }),\n    [cellSize, cellPadding, cellInner, cellHalf, fontSize]\n  );\n\n  const height = useMemo(() => rows * cellSize, [rows]);\n  const width = useMemo(() => cols * cellSize, [cols]);\n  const cellWidthHtmlPct = useMemo(() => 100 / cols, [cols]);\n  const cellHeightHtmlPct = useMemo(() => 100 / rows, [rows]);\n\n  // In order to ensure the top/left positioning makes sense, there is an\n  // absolutely-positioned <div> with no margin/padding that we *don't* expose\n  // to consumers.  This keeps the math much more reliable.  (But we're still\n  // seeing a slight vertical deviation towards the bottom of the grid!  The \"*\n  // 0.995\" seems to help.)  We also need to calculate the effective px size of\n  // the automatically-scaled SVG cells.  We know that \"100% width\" === \"number\n  // of columns\".\n  const inputStyle = useMemo(\n    () =>\n      ({\n        position: 'absolute',\n        top: `calc(${focusedRow * cellHeightHtmlPct * 0.995}% + 2px)`,\n        left: `calc(${focusedCol * cellWidthHtmlPct}% + 2px)`,\n        width: `calc(${cellWidthHtmlPct}% - 4px)`,\n        height: `calc(${cellHeightHtmlPct}% - 4px)`,\n        fontSize: `${fontSize * 6}px`, // waaay too small...?\n        textAlign: 'center',\n        textAnchor: 'middle',\n        backgroundColor: 'transparent',\n        caretColor: 'transparent',\n        margin: 0,\n        padding: 0,\n        border: 0,\n        cursor: 'default',\n      } as const),\n    [cellWidthHtmlPct, cellHeightHtmlPct, focusedRow, focusedCol, fontSize]\n  );\n\n  // The final theme is the merger of three values: the \"theme\" property\n  // passed to the component (which takes precedence), any values from\n  // ThemeContext, and finally the \"defaultTheme\" values fill in for any\n  // needed ones that are missing.  (We create this in standard last-one-wins\n  // order in Javascript, of course.)\n  const finalTheme = useMemo(\n    () => ({ ...defaultTheme, ...contextTheme, ...theme }),\n    [contextTheme, theme]\n  );\n\n  return (\n    <CrosswordSizeContext.Provider value={sizeContext}>\n      <ThemeProvider theme={finalTheme}>\n        <GridWrapper>\n          {/*\n            This div is hard-coded because we *need* a zero-padded,relative-\n            positioned element for aligning the <input> with the cells in the\n            <svg>.\n          */}\n          <div style={{ margin: 0, padding: 0, position: 'relative' }}>\n            <svg viewBox={`0 0 ${width} ${height}`}>\n              <rect\n                x={0}\n                y={0}\n                width={width}\n                height={height}\n                fill={finalTheme.gridBackground}\n              />\n              {gridData.flatMap((rowData, row) =>\n                rowData.map((cellData, col) =>\n                  cellData.used ? (\n                    // Should the Cell figure out its focus/highlight state\n                    // directly from the CrosswordContext?\n                    <Cell\n                      // eslint-disable-next-line react/no-array-index-key\n                      key={`R${row}C${col}`}\n                      cellData={cellData}\n                      focus={\n                        focused && row === focusedRow && col === focusedCol\n                      }\n                      highlight={\n                        focused &&\n                        !!currentNumber &&\n                        cellData[currentDirection] === currentNumber\n                      }\n                      onClick={handleCellClick}\n                    />\n                  ) : undefined\n                )\n              )}\n            </svg>\n            <input\n              ref={inputRef}\n              aria-label=\"crossword-input\"\n              type=\"text\"\n              onClick={handleInputClick}\n              onKeyDown={handleInputKeyDown}\n              onChange={handleInputChange}\n              value=\"\"\n              // onInput={this.handleInput}\n              autoComplete=\"off\"\n              spellCheck=\"false\"\n              autoCorrect=\"off\"\n              style={inputStyle}\n            />\n          </div>\n        </GridWrapper>\n      </ThemeProvider>\n    </CrosswordSizeContext.Provider>\n  );\n}\n\nCrosswordGrid.propTypes = CrosswordGridPropTypes;\n\nCrosswordGrid.defaultProps = {\n  theme: null,\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}